# -*- coding: utf-8 -*-
"""M1S4-AtividadesPráticas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pm1wiGSXClU-uGAJWDTVlYi347oW_Ky2

#**Revisão do conteúdo até M1S3**

*   Variáveis
*   Operações Básicas (+, -, *, /) | (> < == !=) | (and or not)
*   Estruturas condicionais (if | elif | else)
*   Estruturas de Repetição (while | for)
"""

#Exemplo 1 - Soma de duas variáveis
x = 5
y = 7
print(x+y)

#Exemplo 2 - Média de duas variáveis + aprovação (IF ELSE)
media = (x+y)/2
print(media)

if media >= 7:
  print("Aprovado")
else:
  print("Reprovado")

"""#**Revisão do conteúdo semanal (M1S4)**

*   Listas
*   Tuplas
*   Dicionários
*   Funções
*   Classes e POO

##Listas
"""

#Trabalhando com listas de caracteres (Strings)
#                0    1    2    3    4    5    6 
minha_lista  = ['S', 'h', 'e', 'r', 'l', 'o', 'n']
#print(minha_lista[0:3+1])

indices = [0, 3, 6]
for i in indices:
  print(minha_lista[i])

print(minha_lista[3])

minha_string = "Sherlon"
for i in range(7):
  print(minha_string[i])

minha_lista = ["Sherlon", "Diogo", "Joao"]
print( minha_lista[1] )

for indice,valor in enumerate(minha_lista):
  print(indice,valor)

for valor in minha_lista:
  print(valor, end="")

#Trabalhando com listas numéricas
minha_lista = [2, 6, 9, 15, 69]
print(minha_lista)
inicio = 5
fim = 20
quantidade = 3

for i in range(inicio, fim, quantidade):
  print(i)

#Apresentando o comando .append()

usuarios = [ ]

while True:
  nome = input("Digite o seu nome")

  usuarios.append(nome)
  print(usuarios)

  if nome == "sair":
    break

#Exemplo de soma ENEM
minha_lista = []

#Dica: função len() -> length -> comprimento / tamanho

for valor in range(10000):
  minha_lista.append(valor)

soma = 0
for indice in range( len(minha_lista) ):
  soma = soma + minha_lista[indice] #Versão 1
  #soma += minha_lista[indice] #Versão 2
print("Soma:", soma)
print("Notas: ", minha_lista)

exemplo_de_lista = [4,6,5,2,3,1]
print(exemplo_de_lista)
exemplo_de_lista[0] = 5555
print(exemplo_de_lista)

exemplo_de_lista.sort()
print(exemplo_de_lista)

"""##Tuplas (Imutáveis)"""

minha_tupla = (25,15,65)
print(minha_tupla)

"""##Dicionários"""

#Apresentando o conceito {chave: valor}
#                 chave : valor
meu_dicionario = {"Nome": "Sherlon",
                  "Idade": 27}
print(meu_dicionario)

pessoa = {}

nome = input("Nome:")
idade= int(input("idade:"))

pessoa["Nome"] = nome
pessoa["Idade"] = idade
pessoa["Nome"] = "Diogo"

print(pessoa)

"""##Funções"""

#Lembram o que é uma função?

"""##Classes e Programação Orientada a Objetos (POO) ([Referência](https://tmfilho.github.io/pyestbook/objects/02_cpyt.html))"""

class Pessoa:
  #Construtor (inicializa o objeto)
  def __init__(self, nome):
    
    #Atributos (como variáveis)
    self.name = nome
  
  #Metodo (como funções)
  def mostrar_nome(self):
    print(self.name)

nome = "Melissa"
pessoa = Pessoa(nome)
pessoa.mostrar_nome()

"""#**Atividade da Semana**

Desenvolva um programa que simule a entrega de notas quando um cliente efetuar um saque em um caixa eletrônico.

Os requisitos básicos são os seguintes:

*   Entregar o menor número de notas;
*   É possível sacar o valor solicitado com as notas disponíveis;
*   Saldo do cliente infinito;
*   Quantidade de notas infinito (pode-se colocar um valor finito de cédulas para aumentar a dificuldade do problema);
*   Notas disponíveis de $R\$100,00$; $R\$50,00$; $R\$20,00$ e $R\$10,00$
*   Exemplos:
   *   Valor do Saque: $R\$ 30,00$ - Resultado esperado: Entregar 1 nota de $R\$20,00$ e 1 nota de $R\$ 10,00$.
   *   Valor do Saque: $R\$ 80,00$ - Resultado esperado: Entregar 1 nota de $R\$50,00$ 1 nota de $R\$ 20,00$ e 1 nota de $R\$ 10,00$.

Referência: https://dojopuzzles.com/problems/caixa-eletronico/

Nossa sugestão é trabalhar em grupos ou em duplas.

Os tutores também estão disponíveis para quem precisar tirar dúvidas.
"""

#Implementação em Aula
class CaixaEletronico:
    
    def __init__(self, nome):
        #              0   1   2   3   4
        self.notas = [100, 50, 20, 10, 5, 2, 1]
        self.nome_banco = nome

    def saldo(self, valor_saque):
      ########################################
        #Comece aqui seu código
        indice = 0
        restante = valor_saque

        #        V
        #Indice: 0  1  2  3  4
        #Notas: 100 50 20 10 5  2  1
        saque = [0, 0, 0, 0, 0, 0, 0]

        while restante > 0:
          nota_atual = self.notas[indice]
          
          #Saque
          if nota_atual <= restante:
            restante -= nota_atual
            saque[indice] += 1
          else:
            indice += 1
        ########################################
        print(saque)
        self.sacar(saque) #Chamando a função a partir da própria classe
    
    def sacar(self, notas):
      for indice in range( len(notas) ):
        if notas[indice] > 0:
          print(f"Retire {notas[indice]} notas de {self.notas[indice]}")

if __name__ == '__main__':
    caixa_eletronico = CaixaEletronico('Ultima Bank')
    valor = int(input('Valor do saque: '))
    caixa_eletronico.saldo(valor) #Chamando a função (método) a partir do objeto

#Gabarito
class CaixaEletronico:

  def __init__(self, nome):
    self.notas = [100, 50, 20, 10, 5]
    self.nome_banco = nome

  def sacar(self, valor_saque):
    #Comece aqui seu código
    restante = valor #Valor que ainda falta entregar ao usuário
    pos = 0 #Posição da lista da nota atual (Precisa ser da maior para a menor)
    cedulas = [0 for i in range(len(self.notas))] #Cédulas já dadas ao usuário, para contabilização.
    
    while (restante > 0):
      if (self.notas[pos] <= restante):
        restante -= self.notas[pos]
        cedulas[pos] += 1
      else:
        pos += 1
    
    notas_entregues = []
    for i in range(len(self.notas)):
      qtd_notas = cedulas[i]
      valor_nota = self.notas[i]
      if qtd_notas > 0:
        notas_entregues.append(f'{qtd_notas} nota de R$ {valor_nota},00')
    
    self.imprimir_resultado(notas_entregues)

  def imprimir_resultado(self, notas_entregues):
    print(', '.join(notas_entregues))

if __name__ == '__main__':
  caixa_eletronico = CaixaEletronico('Ultima Bank')
  valor = 135 #int(input('Valor do saque: '))
  caixa_eletronico.sacar(valor)

"""#Prática Colaborativa (DOJO)

Uma revendedora de veículos usados precisa da sua ajuda para desenvolver um sistema de armazenamento de informações e realização de consultas em sua relação de carros e motos à pronta entrega.

Você precisa:
*   Criar uma classe Veículos com os seguintes atributos:
    *   ID: 25 (Identificação única no estoque)
    *   Tipo: Carro, Moto, etc...
    *   Marca: Chevrolet, etc...
    *   Modelo: Monza, etc...
    *   Placa: ABC0311
    *   Número de rodas: 2, 4, etc...
    *   Ano: 2008, etc
    *   Preço: 12560.50
*   Desenvolver os seguintes métodos:
    *   Cadastrar novo veículo no Estoque.
    *   Atualizar informações de um veículo.
    *   Mostrar veículos a partir de um certo ano.
    *   Mostrar veículos a partir de um certo preço.
"""

class Veiculo:
  def __init__(self, ID):
    self.id = ID
    self.tipo = None
    self.modelo = None
    self.cadastro()
  
  def olaMundo(self):
    print("Olá mundo!")
  
  def cadastro(self):
    self.tipo = input("Digite o tipo: ")

estoque = []
for i in range(3):
  veiculo = Veiculo(i)
  estoque.append(veiculo)

estoque[0].tipo

#Exemplo
estoque = []
for i in range(4):
  obj = Veiculo(i)
  estoque.append(obj)

estoque[0].id